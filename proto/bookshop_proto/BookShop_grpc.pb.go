// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: BookShop.proto

package bookshop_protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BookShopService_ListAll_FullMethodName = "/bookshop.BookShopService/ListAll"
	BookShopService_AddBook_FullMethodName = "/bookshop.BookShopService/AddBook"
)

// BookShopServiceClient is the client API for BookShopService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookShopServiceClient interface {
	ListAll(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ListAllResponse, error)
	AddBook(ctx context.Context, in *Book, opts ...grpc.CallOption) (*AddBookResponse, error)
}

type bookShopServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBookShopServiceClient(cc grpc.ClientConnInterface) BookShopServiceClient {
	return &bookShopServiceClient{cc}
}

func (c *bookShopServiceClient) ListAll(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ListAllResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAllResponse)
	err := c.cc.Invoke(ctx, BookShopService_ListAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookShopServiceClient) AddBook(ctx context.Context, in *Book, opts ...grpc.CallOption) (*AddBookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddBookResponse)
	err := c.cc.Invoke(ctx, BookShopService_AddBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookShopServiceServer is the server API for BookShopService service.
// All implementations must embed UnimplementedBookShopServiceServer
// for forward compatibility.
type BookShopServiceServer interface {
	ListAll(context.Context, *Void) (*ListAllResponse, error)
	AddBook(context.Context, *Book) (*AddBookResponse, error)
	mustEmbedUnimplementedBookShopServiceServer()
}

// UnimplementedBookShopServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBookShopServiceServer struct{}

func (UnimplementedBookShopServiceServer) ListAll(context.Context, *Void) (*ListAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAll not implemented")
}
func (UnimplementedBookShopServiceServer) AddBook(context.Context, *Book) (*AddBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBook not implemented")
}
func (UnimplementedBookShopServiceServer) mustEmbedUnimplementedBookShopServiceServer() {}
func (UnimplementedBookShopServiceServer) testEmbeddedByValue()                         {}

// UnsafeBookShopServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookShopServiceServer will
// result in compilation errors.
type UnsafeBookShopServiceServer interface {
	mustEmbedUnimplementedBookShopServiceServer()
}

func RegisterBookShopServiceServer(s grpc.ServiceRegistrar, srv BookShopServiceServer) {
	// If the following call pancis, it indicates UnimplementedBookShopServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BookShopService_ServiceDesc, srv)
}

func _BookShopService_ListAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookShopServiceServer).ListAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookShopService_ListAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookShopServiceServer).ListAll(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookShopService_AddBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Book)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookShopServiceServer).AddBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookShopService_AddBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookShopServiceServer).AddBook(ctx, req.(*Book))
	}
	return interceptor(ctx, in, info, handler)
}

// BookShopService_ServiceDesc is the grpc.ServiceDesc for BookShopService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookShopService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bookshop.BookShopService",
	HandlerType: (*BookShopServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAll",
			Handler:    _BookShopService_ListAll_Handler,
		},
		{
			MethodName: "AddBook",
			Handler:    _BookShopService_AddBook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "BookShop.proto",
}
